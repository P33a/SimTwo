unit uPSI_ODERobots;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_ODERobots = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TRobotList(CL: TPSPascalCompiler);
procedure SIRegister_TRobot(CL: TPSPascalCompiler);
procedure SIRegister_TSensorList(CL: TPSPascalCompiler);
procedure SIRegister_TSensor(CL: TPSPascalCompiler);
procedure SIRegister_TWheelList(CL: TPSPascalCompiler);
procedure SIRegister_TWheel(CL: TPSPascalCompiler);
procedure SIRegister_TSolidLinkList(CL: TPSPascalCompiler);
procedure SIRegister_TSolidLink(CL: TPSPascalCompiler);
procedure SIRegister_TAxisList(CL: TPSPascalCompiler);
procedure SIRegister_TAxis(CL: TPSPascalCompiler);
procedure SIRegister_TAxisTrajList(CL: TPSPascalCompiler);
procedure SIRegister_TAxisTraj(CL: TPSPascalCompiler);
procedure SIRegister_TSolidList(CL: TPSPascalCompiler);
procedure SIRegister_TSolid(CL: TPSPascalCompiler);
procedure SIRegister_ODERobots(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TRobotList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TRobot(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSensorList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSensor(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWheelList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TWheel(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSolidLinkList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSolidLink(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAxisList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAxis(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAxisTrajList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TAxisTraj(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSolidList(CL: TPSRuntimeClassImporter);
procedure RIRegister_TSolid(CL: TPSRuntimeClassImporter);
procedure RIRegister_ODERobots(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   Windows
  ,Messages
  ,Variants
  ,Graphics
  ,Controls
  ,Forms
  ,Dialogs
  ,GLScene
  ,GLObjects
  ,GLMisc
  ,GLWin32Viewer
  ,ODEImport
  ,VectorGeometry
  ,GLGeomObjects
  ,ExtCtrls
  ,ComCtrls
  ,GLTexture
  ,keyboard
  ,math
  ,remote
  ,Contnrs
  ,ODERobots
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_ODERobots]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TRobotList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TRobotList') do
  with CL.AddClassN(CL.FindClass('TList'),'TRobotList') do
  begin
    RegisterMethod('Function Add( ARobot : TRobot) : Integer');
    RegisterMethod('Function Extract( Item : TRobot) : TRobot');
    RegisterMethod('Function Remove( ARobot : TRobot) : Integer');
    RegisterMethod('Function IndexOf( ARobot : TRobot) : Integer');
    RegisterMethod('Function First : TRobot');
    RegisterMethod('Function Last : TRobot');
    RegisterMethod('Procedure Insert( Index : Integer; ARobot : TRobot)');
    RegisterProperty('Items', 'TRobot Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterMethod('Procedure ClearAll');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TRobot(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TRobot') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TRobot') do
  begin
    RegisterProperty('Solids', 'TSolidList', iptrw);
    RegisterProperty('Links', 'TSolidLinkList', iptrw);
    RegisterProperty('Axes', 'TAxisList', iptrw);
    RegisterProperty('AxesWayPointsIDs', 'TStringlist', iptrw);
    RegisterProperty('MainBody', 'TSolid', iptrw);
    RegisterProperty('Shells', 'TSolidList', iptrw);
    RegisterProperty('Wheels', 'TWheelList', iptrw);
    RegisterProperty('IRSensors', 'TSensorList', iptrw);
    RegisterProperty('Kind', 'TRobotKind', iptrw);
    RegisterProperty('SamplesCount', 'integer', iptrw);
    RegisterProperty('DecPeriodSamples', 'integer', iptrw);
    RegisterProperty('Name', 'string', iptrw);
    RegisterProperty('ForceMoved', 'boolean', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure SetXYZTeta( new_x, new_y, new_z, new_teta : double)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSensorList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TSensorList') do
  with CL.AddClassN(CL.FindClass('TList'),'TSensorList') do
  begin
    RegisterMethod('Function Add( ASensor : TSensor) : Integer');
    RegisterMethod('Function Extract( Item : TSensor) : TSensor');
    RegisterMethod('Function Remove( ASensor : TSensor) : Integer');
    RegisterMethod('Function IndexOf( ASensor : TSensor) : Integer');
    RegisterMethod('Function First : TSensor');
    RegisterMethod('Function Last : TSensor');
    RegisterMethod('Procedure Insert( Index : Integer; ASensor : TSensor)');
    RegisterProperty('Items', 'TSensor Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterMethod('Procedure ClearAll');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSensor(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TSensor') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TSensor') do
  begin
    RegisterProperty('Geom', 'PdxGeom', iptrw);
    RegisterProperty('GLObj', 'TGLSceneObject', iptrw);
    RegisterProperty('measure', 'double', iptrw);
    RegisterProperty('pos', 'TdVector3', iptrw);
    RegisterProperty('kind', 'TSensorKind', iptrw);
    RegisterProperty('Noise', 'TSensorNoise', iptrw);
    RegisterProperty('has_measure', 'boolean', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure SetColor( R, G, B : single; A : single)');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWheelList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TWheelList') do
  with CL.AddClassN(CL.FindClass('TList'),'TWheelList') do
  begin
    RegisterMethod('Function Add( AWheel : TWheel) : Integer');
    RegisterMethod('Function Extract( Item : TWheel) : TWheel');
    RegisterMethod('Function Remove( AWheel : TWheel) : Integer');
    RegisterMethod('Function IndexOf( AWheel : TWheel) : Integer');
    RegisterMethod('Function First : TWheel');
    RegisterMethod('Function Last : TWheel');
    RegisterMethod('Procedure Insert( Index : Integer; AWheel : TWheel)');
    RegisterProperty('Items', 'TWheel Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterMethod('Procedure ClearAll');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TWheel(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TWheel') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TWheel') do
  begin
    RegisterProperty('Pars', 'TWheelPars', iptrw);
    RegisterProperty('Tyre', 'TSolid', iptrw);
    RegisterProperty('Axle', 'TSolidLink', iptrw);
    RegisterProperty('active', 'boolean', iptrw);
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSolidLinkList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TSolidLinkList') do
  with CL.AddClassN(CL.FindClass('TList'),'TSolidLinkList') do
  begin
    RegisterMethod('Function Add( ASolidLink : TSolidLink) : Integer');
    RegisterMethod('Function Extract( Item : TSolidLink) : TSolidLink');
    RegisterMethod('Function Remove( ASolidLink : TSolidLink) : Integer');
    RegisterMethod('Function IndexOf( ASolidLink : TSolidLink) : Integer');
    RegisterMethod('Function First : TSolidLink');
    RegisterMethod('Function Last : TSolidLink');
    RegisterMethod('Procedure Insert( Index : Integer; ASolidLink : TSolidLink)');
    RegisterProperty('Items', 'TSolidLink Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterMethod('Procedure ClearAll');
    RegisterMethod('Function IndexOfID( aID : string) : integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSolidLink(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TSolidLink') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TSolidLink') do
  begin
    RegisterProperty('joint', 'TdJointID', iptrw);
    RegisterProperty('GLObj', 'TGLBaseSceneObject', iptrw);
    RegisterProperty('Axis', '', iptrw);
    RegisterProperty('ID', 'string', iptrw);
    RegisterProperty('description', 'string', iptrw);
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAxisList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TAxisList') do
  with CL.AddClassN(CL.FindClass('TList'),'TAxisList') do
  begin
    RegisterMethod('Function Add( AAxis : TAxis) : Integer');
    RegisterMethod('Function Extract( Item : TAxis) : TAxis');
    RegisterMethod('Function Remove( AAxis : TAxis) : Integer');
    RegisterMethod('Function IndexOf( AAxis : TAxis) : Integer');
    RegisterMethod('Function First : TAxis');
    RegisterMethod('Function Last : TAxis');
    RegisterMethod('Procedure Insert( Index : Integer; AAxis : TAxis)');
    RegisterProperty('Items', 'TAxis Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterMethod('Procedure ClearAll');
    RegisterMethod('Function IndexFromAxisID( aID : string; ith : integer) : integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAxis(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TAxis') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TAxis') do
  begin
    RegisterProperty('ParentLink', 'TSolidLink', iptrw);
    RegisterProperty('GLObj', 'TGLBaseSceneObject', iptrw);
    RegisterProperty('Friction', 'TFriction', iptrw);
    RegisterProperty('Motor', 'TMotor', iptrw);
    RegisterProperty('TrajectPoints', 'TAxisTrajList', iptrw);
    RegisterProperty('WayPoints', 'TAxisTrajList', iptrw);
    RegisterProperty('Odo', 'TOdoState', iptrw);
    RegisterProperty('ref', 'TAxisInputs', iptrw);
    RegisterProperty('torque', 'double', iptrw);
    RegisterProperty('speed_lambda', 'double', iptrw);
    RegisterProperty('filt_speed', 'double', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure GetAnchor( var result : TdVector3)');
    RegisterMethod('Procedure GetDir( var result : TdVector3)');
    RegisterMethod('Function GetPos : double');
    RegisterMethod('Function GetSpeed : double');
    RegisterMethod('Procedure AddTorque( Tq : Double)');
    RegisterMethod('Procedure GLCreate( Parent : TGLBaseSceneObject; aRadius, aHeight : double)');
    RegisterMethod('Procedure GLSetPosition');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAxisTrajList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TAxisTrajList') do
  with CL.AddClassN(CL.FindClass('TList'),'TAxisTrajList') do
  begin
    RegisterMethod('Function Add( AAxisTraj : TAxisTraj) : Integer');
    RegisterMethod('Function Extract( Item : TAxisTraj) : TAxisTraj');
    RegisterMethod('Function Remove( AAxisTraj : TAxisTraj) : Integer');
    RegisterMethod('Function IndexOf( AAxisTraj : TAxisTraj) : Integer');
    RegisterMethod('Function First : TAxisTraj');
    RegisterMethod('Function Last : TAxisTraj');
    RegisterMethod('Procedure Insert( Index : Integer; AAxisTraj : TAxisTraj)');
    RegisterProperty('Items', 'TAxisTraj Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterMethod('Procedure ClearAll');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TAxisTraj(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TAxisTraj') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TAxisTraj') do
  begin
    RegisterProperty('pos', 'double', iptrw);
    RegisterProperty('speed', 'double', iptrw);
    RegisterProperty('t', 'double', iptrw);
    RegisterMethod('Constructor Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSolidList(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TList', 'TSolidList') do
  with CL.AddClassN(CL.FindClass('TList'),'TSolidList') do
  begin
    RegisterMethod('Function Add( ASolid : TSolid) : Integer');
    RegisterMethod('Function Extract( Item : TSolid) : TSolid');
    RegisterMethod('Function Remove( ASolid : TSolid) : Integer');
    RegisterMethod('Function IndexOf( ASolid : TSolid) : Integer');
    RegisterMethod('Function First : TSolid');
    RegisterMethod('Function Last : TSolid');
    RegisterMethod('Procedure Insert( Index : Integer; ASolid : TSolid)');
    RegisterProperty('Items', 'TSolid Integer', iptrw);
    SetDefaultPropery('Items');
    RegisterMethod('Procedure ClearAll');
    RegisterMethod('Function IndexFromID( aID : string) : integer');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TSolid(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TOBJECT', 'TSolid') do
  with CL.AddClassN(CL.FindClass('TOBJECT'),'TSolid') do
  begin
    RegisterProperty('Body', 'PdxBody', iptrw);
    RegisterProperty('Geom', 'PdxGeom', iptrw);
    RegisterProperty('GLObj', 'TGLSceneObject', iptrw);
    RegisterProperty('kind', 'integer', iptrw);
    RegisterProperty('ParSurface', 'TdSurfaceParameters', iptrw);
    RegisterProperty('MaxParSurface', 'TdSurfaceParameters', iptrw);
    RegisterProperty('ID', 'string', iptrw);
    RegisterProperty('description', 'string', iptrw);
    RegisterProperty('ZeroPosition', 'TdVector3', iptrw);
    RegisterProperty('ZeroRotation', 'TdMatrix3', iptrw);
    RegisterMethod('Constructor Create');
    RegisterMethod('Procedure SetPosition( posX, posY, posZ : double)');
    RegisterMethod('Procedure SetRotationA( axisX, axisY, axisZ, rot_angle : double)');
    RegisterMethod('Procedure SetRotationR( R : TdMatrix3)');
    RegisterMethod('Procedure SetZeroState');
    RegisterMethod('Procedure SetColor( R, G, B : single; A : single)');
    RegisterMethod('Procedure SetTexture( TextureName : string; TextureScale : double)');
    RegisterMethod('Function GetPosition : TdVector3');
    RegisterMethod('Function GetRotation : TdMatrix3');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_ODERobots(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('MAX_CONTACTS','LongInt').SetInt( 8);
 CL.AddConstantN('MaxJointSamples','LongInt').SetInt( 256);
 CL.AddConstantN('MaxKeyVals','LongInt').SetInt( 8);
 CL.AddConstantN('MaxAxis','LongInt').SetInt( 3);
 CL.AddConstantN('MaxDim','LongInt').SetInt( 8);
 CL.AddConstantN('skDefault','LongInt').SetInt( 0);
 CL.AddConstantN('skOmniWheel','LongInt').SetInt( 1);
 CL.AddConstantN('skMotorBelt','LongInt').SetInt( 2);
  CL.AddTypeS('TControlMode', '( cmPIDPosition, cmPIDSpeed, cmState )');
  CL.AddTypeS('TFriction', 'record Bv : double; Fc : double; CoulombLimit : dou'
   +'ble; end');
  CL.AddTypeS('TMotController', 'record Ki : double; Kd : double; Kp : double; '
   +'Kf : double; Sek : double; ek_1 : double; y_sat : double; ticks : integer;'
   +' controlPeriod : integer; ControlMode : TControlMode; active : boolean; en'
   +'d');
  CL.AddTypeS('TEncoder', 'record PPR : integer; NoiseMean : double; NoiseStDev'
   +' : double; end');
  CL.AddTypeS('TMotor', 'record Ri : double; Ki : double; Vmax : double; Imax :'
   +' double; Im : double; GearRatio : double; Encoder : TEncoder; Controller :'
   +' TMotController; voltage : double; active : boolean; end');
  SIRegister_TSolid(CL);
  SIRegister_TSolidList(CL);
  SIRegister_TAxisTraj(CL);
  SIRegister_TAxisTrajList(CL);
  CL.AddTypeS('TAxisGLPars', 'record radius : double; height : double; color : '
   +'longWord; end');
  CL.AddTypeS('TAxisInputs', 'record theta : double; w : double; volts : double'
   +'; Torque : double; end');
  CL.AddTypeS('TOdoState', 'record Angle : double; LastAngle : double; Residue '
   +': double; Value : integer; LastValue : integer; AccValue : integer; end');
  CL.AddClassN(CL.FindClass('TOBJECT'),'TSolidLink');
  SIRegister_TAxis(CL);
  SIRegister_TAxisList(CL);
  SIRegister_TSolidLink(CL);
  SIRegister_TSolidLinkList(CL);
  CL.AddTypeS('TWheelPars', 'record Radius : double; Width : double; mass : dou'
   +'ble; CenterDist : double; Angle : double; omni : boolean; end');
  SIRegister_TWheel(CL);
  SIRegister_TWheelList(CL);
  CL.AddTypeS('TSensorNoise', 'record var_k : double; var_d : double; offset : '
   +'double; gain : double; active : boolean; end');
  CL.AddTypeS('TSensorKind', '( skGeneric, skIR, skIRSharp, skSonar )');
  SIRegister_TSensor(CL);
  SIRegister_TSensorList(CL);
  CL.AddTypeS('TJointsRefs', 'record end');
  CL.AddTypeS('TRobotKind', '( rkUnknown, rkWheelChair, rkOmni3, rkOmni4, rkHum'
   +'anoid, rkArm, rkConveyorBelt, rkOther )');
  SIRegister_TRobot(CL);
  SIRegister_TRobotList(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TRobotListItems_W(Self: TRobotList; const T: TRobot; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotListItems_R(Self: TRobotList; var T: TRobot; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TRobotForceMoved_W(Self: TRobot; const T: boolean);
Begin Self.ForceMoved := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotForceMoved_R(Self: TRobot; var T: boolean);
Begin T := Self.ForceMoved; end;

(*----------------------------------------------------------------------------*)
procedure TRobotName_W(Self: TRobot; const T: string);
Begin Self.Name := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotName_R(Self: TRobot; var T: string);
Begin T := Self.Name; end;

(*----------------------------------------------------------------------------*)
procedure TRobotDecPeriodSamples_W(Self: TRobot; const T: integer);
Begin Self.DecPeriodSamples := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotDecPeriodSamples_R(Self: TRobot; var T: integer);
Begin T := Self.DecPeriodSamples; end;

(*----------------------------------------------------------------------------*)
procedure TRobotSamplesCount_W(Self: TRobot; const T: integer);
Begin Self.SamplesCount := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotSamplesCount_R(Self: TRobot; var T: integer);
Begin T := Self.SamplesCount; end;

(*----------------------------------------------------------------------------*)
procedure TRobotKind_W(Self: TRobot; const T: TRobotKind);
Begin Self.Kind := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotKind_R(Self: TRobot; var T: TRobotKind);
Begin T := Self.Kind; end;

(*----------------------------------------------------------------------------*)
procedure TRobotIRSensors_W(Self: TRobot; const T: TSensorList);
Begin Self.IRSensors := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotIRSensors_R(Self: TRobot; var T: TSensorList);
Begin T := Self.IRSensors; end;

(*----------------------------------------------------------------------------*)
procedure TRobotWheels_W(Self: TRobot; const T: TWheelList);
Begin Self.Wheels := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotWheels_R(Self: TRobot; var T: TWheelList);
Begin T := Self.Wheels; end;

(*----------------------------------------------------------------------------*)
procedure TRobotShells_W(Self: TRobot; const T: TSolidList);
Begin Self.Shells := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotShells_R(Self: TRobot; var T: TSolidList);
Begin T := Self.Shells; end;

(*----------------------------------------------------------------------------*)
procedure TRobotMainBody_W(Self: TRobot; const T: TSolid);
Begin Self.MainBody := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotMainBody_R(Self: TRobot; var T: TSolid);
Begin T := Self.MainBody; end;

(*----------------------------------------------------------------------------*)
procedure TRobotAxesWayPointsIDs_W(Self: TRobot; const T: TStringlist);
Begin Self.AxesWayPointsIDs := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotAxesWayPointsIDs_R(Self: TRobot; var T: TStringlist);
Begin T := Self.AxesWayPointsIDs; end;

(*----------------------------------------------------------------------------*)
procedure TRobotAxes_W(Self: TRobot; const T: TAxisList);
Begin Self.Axes := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotAxes_R(Self: TRobot; var T: TAxisList);
Begin T := Self.Axes; end;

(*----------------------------------------------------------------------------*)
procedure TRobotLinks_W(Self: TRobot; const T: TSolidLinkList);
Begin Self.Links := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotLinks_R(Self: TRobot; var T: TSolidLinkList);
Begin T := Self.Links; end;

(*----------------------------------------------------------------------------*)
procedure TRobotSolids_W(Self: TRobot; const T: TSolidList);
Begin Self.Solids := T; end;

(*----------------------------------------------------------------------------*)
procedure TRobotSolids_R(Self: TRobot; var T: TSolidList);
Begin T := Self.Solids; end;

(*----------------------------------------------------------------------------*)
procedure TSensorListItems_W(Self: TSensorList; const T: TSensor; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSensorListItems_R(Self: TSensorList; var T: TSensor; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSensorhas_measure_W(Self: TSensor; const T: boolean);
Begin Self.has_measure := T; end;

(*----------------------------------------------------------------------------*)
procedure TSensorhas_measure_R(Self: TSensor; var T: boolean);
Begin T := Self.has_measure; end;

(*----------------------------------------------------------------------------*)
procedure TSensorNoise_W(Self: TSensor; const T: TSensorNoise);
Begin Self.Noise := T; end;

(*----------------------------------------------------------------------------*)
procedure TSensorNoise_R(Self: TSensor; var T: TSensorNoise);
Begin T := Self.Noise; end;

(*----------------------------------------------------------------------------*)
procedure TSensorkind_W(Self: TSensor; const T: TSensorKind);
Begin Self.kind := T; end;

(*----------------------------------------------------------------------------*)
procedure TSensorkind_R(Self: TSensor; var T: TSensorKind);
Begin T := Self.kind; end;

(*----------------------------------------------------------------------------*)
procedure TSensorpos_W(Self: TSensor; const T: TdVector3);
Begin Self.pos := T; end;

(*----------------------------------------------------------------------------*)
procedure TSensorpos_R(Self: TSensor; var T: TdVector3);
Begin T := Self.pos; end;

(*----------------------------------------------------------------------------*)
procedure TSensormeasure_W(Self: TSensor; const T: double);
Begin Self.measure := T; end;

(*----------------------------------------------------------------------------*)
procedure TSensormeasure_R(Self: TSensor; var T: double);
Begin T := Self.measure; end;

(*----------------------------------------------------------------------------*)
procedure TSensorGLObj_W(Self: TSensor; const T: TGLSceneObject);
Begin Self.GLObj := T; end;

(*----------------------------------------------------------------------------*)
procedure TSensorGLObj_R(Self: TSensor; var T: TGLSceneObject);
Begin T := Self.GLObj; end;

(*----------------------------------------------------------------------------*)
procedure TSensorGeom_W(Self: TSensor; const T: PdxGeom);
Begin Self.Geom := T; end;

(*----------------------------------------------------------------------------*)
procedure TSensorGeom_R(Self: TSensor; var T: PdxGeom);
Begin T := Self.Geom; end;

(*----------------------------------------------------------------------------*)
procedure TWheelListItems_W(Self: TWheelList; const T: TWheel; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TWheelListItems_R(Self: TWheelList; var T: TWheel; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TWheelactive_W(Self: TWheel; const T: boolean);
Begin Self.active := T; end;

(*----------------------------------------------------------------------------*)
procedure TWheelactive_R(Self: TWheel; var T: boolean);
Begin T := Self.active; end;

(*----------------------------------------------------------------------------*)
procedure TWheelAxle_W(Self: TWheel; const T: TSolidLink);
Begin Self.Axle := T; end;

(*----------------------------------------------------------------------------*)
procedure TWheelAxle_R(Self: TWheel; var T: TSolidLink);
Begin T := Self.Axle; end;

(*----------------------------------------------------------------------------*)
procedure TWheelTyre_W(Self: TWheel; const T: TSolid);
Begin Self.Tyre := T; end;

(*----------------------------------------------------------------------------*)
procedure TWheelTyre_R(Self: TWheel; var T: TSolid);
Begin T := Self.Tyre; end;

(*----------------------------------------------------------------------------*)
procedure TWheelPars_W(Self: TWheel; const T: TWheelPars);
Begin Self.Pars := T; end;

(*----------------------------------------------------------------------------*)
procedure TWheelPars_R(Self: TWheel; var T: TWheelPars);
Begin T := Self.Pars; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkListItems_W(Self: TSolidLinkList; const T: TSolidLink; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkListItems_R(Self: TSolidLinkList; var T: TSolidLink; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkdescription_W(Self: TSolidLink; const T: string);
Begin Self.description := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkdescription_R(Self: TSolidLink; var T: string);
Begin T := Self.description; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkID_W(Self: TSolidLink; const T: string);
Begin Self.ID := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkID_R(Self: TSolidLink; var T: string);
Begin T := Self.ID; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkAxis_W(Self: TSolidLink; const T: );
Begin Self.Axis := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkAxis_R(Self: TSolidLink; var T: );
Begin T := Self.Axis; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkGLObj_W(Self: TSolidLink; const T: TGLBaseSceneObject);
Begin Self.GLObj := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkGLObj_R(Self: TSolidLink; var T: TGLBaseSceneObject);
Begin T := Self.GLObj; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkjoint_W(Self: TSolidLink; const T: TdJointID);
Begin Self.joint := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidLinkjoint_R(Self: TSolidLink; var T: TdJointID);
Begin T := Self.joint; end;

(*----------------------------------------------------------------------------*)
procedure TAxisListItems_W(Self: TAxisList; const T: TAxis; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisListItems_R(Self: TAxisList; var T: TAxis; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TAxisfilt_speed_W(Self: TAxis; const T: double);
Begin Self.filt_speed := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisfilt_speed_R(Self: TAxis; var T: double);
Begin T := Self.filt_speed; end;

(*----------------------------------------------------------------------------*)
procedure TAxisspeed_lambda_W(Self: TAxis; const T: double);
Begin Self.speed_lambda := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisspeed_lambda_R(Self: TAxis; var T: double);
Begin T := Self.speed_lambda; end;

(*----------------------------------------------------------------------------*)
procedure TAxistorque_W(Self: TAxis; const T: double);
Begin Self.torque := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxistorque_R(Self: TAxis; var T: double);
Begin T := Self.torque; end;

(*----------------------------------------------------------------------------*)
procedure TAxisref_W(Self: TAxis; const T: TAxisInputs);
Begin Self.ref := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisref_R(Self: TAxis; var T: TAxisInputs);
Begin T := Self.ref; end;

(*----------------------------------------------------------------------------*)
procedure TAxisOdo_W(Self: TAxis; const T: TOdoState);
Begin Self.Odo := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisOdo_R(Self: TAxis; var T: TOdoState);
Begin T := Self.Odo; end;

(*----------------------------------------------------------------------------*)
procedure TAxisWayPoints_W(Self: TAxis; const T: TAxisTrajList);
Begin Self.WayPoints := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisWayPoints_R(Self: TAxis; var T: TAxisTrajList);
Begin T := Self.WayPoints; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajectPoints_W(Self: TAxis; const T: TAxisTrajList);
Begin Self.TrajectPoints := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajectPoints_R(Self: TAxis; var T: TAxisTrajList);
Begin T := Self.TrajectPoints; end;

(*----------------------------------------------------------------------------*)
procedure TAxisMotor_W(Self: TAxis; const T: TMotor);
Begin Self.Motor := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisMotor_R(Self: TAxis; var T: TMotor);
Begin T := Self.Motor; end;

(*----------------------------------------------------------------------------*)
procedure TAxisFriction_W(Self: TAxis; const T: TFriction);
Begin Self.Friction := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisFriction_R(Self: TAxis; var T: TFriction);
Begin T := Self.Friction; end;

(*----------------------------------------------------------------------------*)
procedure TAxisGLObj_W(Self: TAxis; const T: TGLBaseSceneObject);
Begin Self.GLObj := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisGLObj_R(Self: TAxis; var T: TGLBaseSceneObject);
Begin T := Self.GLObj; end;

(*----------------------------------------------------------------------------*)
procedure TAxisParentLink_W(Self: TAxis; const T: TSolidLink);
Begin Self.ParentLink := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisParentLink_R(Self: TAxis; var T: TSolidLink);
Begin T := Self.ParentLink; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajListItems_W(Self: TAxisTrajList; const T: TAxisTraj; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajListItems_R(Self: TAxisTrajList; var T: TAxisTraj; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajt_W(Self: TAxisTraj; const T: double);
Begin Self.t := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajt_R(Self: TAxisTraj; var T: double);
Begin T := Self.t; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajspeed_W(Self: TAxisTraj; const T: double);
Begin Self.speed := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajspeed_R(Self: TAxisTraj; var T: double);
Begin T := Self.speed; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajpos_W(Self: TAxisTraj; const T: double);
Begin Self.pos := T; end;

(*----------------------------------------------------------------------------*)
procedure TAxisTrajpos_R(Self: TAxisTraj; var T: double);
Begin T := Self.pos; end;

(*----------------------------------------------------------------------------*)
procedure TSolidListItems_W(Self: TSolidList; const T: TSolid; const t1: Integer);
begin Self.Items[t1] := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidListItems_R(Self: TSolidList; var T: TSolid; const t1: Integer);
begin T := Self.Items[t1]; end;

(*----------------------------------------------------------------------------*)
procedure TSolidZeroRotation_W(Self: TSolid; const T: TdMatrix3);
Begin Self.ZeroRotation := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidZeroRotation_R(Self: TSolid; var T: TdMatrix3);
Begin T := Self.ZeroRotation; end;

(*----------------------------------------------------------------------------*)
procedure TSolidZeroPosition_W(Self: TSolid; const T: TdVector3);
Begin Self.ZeroPosition := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidZeroPosition_R(Self: TSolid; var T: TdVector3);
Begin T := Self.ZeroPosition; end;

(*----------------------------------------------------------------------------*)
procedure TSoliddescription_W(Self: TSolid; const T: string);
Begin Self.description := T; end;

(*----------------------------------------------------------------------------*)
procedure TSoliddescription_R(Self: TSolid; var T: string);
Begin T := Self.description; end;

(*----------------------------------------------------------------------------*)
procedure TSolidID_W(Self: TSolid; const T: string);
Begin Self.ID := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidID_R(Self: TSolid; var T: string);
Begin T := Self.ID; end;

(*----------------------------------------------------------------------------*)
procedure TSolidMaxParSurface_W(Self: TSolid; const T: TdSurfaceParameters);
Begin Self.MaxParSurface := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidMaxParSurface_R(Self: TSolid; var T: TdSurfaceParameters);
Begin T := Self.MaxParSurface; end;

(*----------------------------------------------------------------------------*)
procedure TSolidParSurface_W(Self: TSolid; const T: TdSurfaceParameters);
Begin Self.ParSurface := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidParSurface_R(Self: TSolid; var T: TdSurfaceParameters);
Begin T := Self.ParSurface; end;

(*----------------------------------------------------------------------------*)
procedure TSolidkind_W(Self: TSolid; const T: integer);
Begin Self.kind := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidkind_R(Self: TSolid; var T: integer);
Begin T := Self.kind; end;

(*----------------------------------------------------------------------------*)
procedure TSolidGLObj_W(Self: TSolid; const T: TGLSceneObject);
Begin Self.GLObj := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidGLObj_R(Self: TSolid; var T: TGLSceneObject);
Begin T := Self.GLObj; end;

(*----------------------------------------------------------------------------*)
procedure TSolidGeom_W(Self: TSolid; const T: PdxGeom);
Begin Self.Geom := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidGeom_R(Self: TSolid; var T: PdxGeom);
Begin T := Self.Geom; end;

(*----------------------------------------------------------------------------*)
procedure TSolidBody_W(Self: TSolid; const T: PdxBody);
Begin Self.Body := T; end;

(*----------------------------------------------------------------------------*)
procedure TSolidBody_R(Self: TSolid; var T: PdxBody);
Begin T := Self.Body; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRobotList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRobotList) do
  begin
    RegisterMethod(@TRobotList.Add, 'Add');
    RegisterMethod(@TRobotList.Extract, 'Extract');
    RegisterMethod(@TRobotList.Remove, 'Remove');
    RegisterMethod(@TRobotList.IndexOf, 'IndexOf');
    RegisterMethod(@TRobotList.First, 'First');
    RegisterMethod(@TRobotList.Last, 'Last');
    RegisterMethod(@TRobotList.Insert, 'Insert');
    RegisterPropertyHelper(@TRobotListItems_R,@TRobotListItems_W,'Items');
    RegisterMethod(@TRobotList.ClearAll, 'ClearAll');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TRobot(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TRobot) do
  begin
    RegisterPropertyHelper(@TRobotSolids_R,@TRobotSolids_W,'Solids');
    RegisterPropertyHelper(@TRobotLinks_R,@TRobotLinks_W,'Links');
    RegisterPropertyHelper(@TRobotAxes_R,@TRobotAxes_W,'Axes');
    RegisterPropertyHelper(@TRobotAxesWayPointsIDs_R,@TRobotAxesWayPointsIDs_W,'AxesWayPointsIDs');
    RegisterPropertyHelper(@TRobotMainBody_R,@TRobotMainBody_W,'MainBody');
    RegisterPropertyHelper(@TRobotShells_R,@TRobotShells_W,'Shells');
    RegisterPropertyHelper(@TRobotWheels_R,@TRobotWheels_W,'Wheels');
    RegisterPropertyHelper(@TRobotIRSensors_R,@TRobotIRSensors_W,'IRSensors');
    RegisterPropertyHelper(@TRobotKind_R,@TRobotKind_W,'Kind');
    RegisterPropertyHelper(@TRobotSamplesCount_R,@TRobotSamplesCount_W,'SamplesCount');
    RegisterPropertyHelper(@TRobotDecPeriodSamples_R,@TRobotDecPeriodSamples_W,'DecPeriodSamples');
    RegisterPropertyHelper(@TRobotName_R,@TRobotName_W,'Name');
    RegisterPropertyHelper(@TRobotForceMoved_R,@TRobotForceMoved_W,'ForceMoved');
    RegisterConstructor(@TRobot.Create, 'Create');
    RegisterMethod(@TRobot.SetXYZTeta, 'SetXYZTeta');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSensorList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSensorList) do
  begin
    RegisterMethod(@TSensorList.Add, 'Add');
    RegisterMethod(@TSensorList.Extract, 'Extract');
    RegisterMethod(@TSensorList.Remove, 'Remove');
    RegisterMethod(@TSensorList.IndexOf, 'IndexOf');
    RegisterMethod(@TSensorList.First, 'First');
    RegisterMethod(@TSensorList.Last, 'Last');
    RegisterMethod(@TSensorList.Insert, 'Insert');
    RegisterPropertyHelper(@TSensorListItems_R,@TSensorListItems_W,'Items');
    RegisterMethod(@TSensorList.ClearAll, 'ClearAll');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSensor(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSensor) do
  begin
    RegisterPropertyHelper(@TSensorGeom_R,@TSensorGeom_W,'Geom');
    RegisterPropertyHelper(@TSensorGLObj_R,@TSensorGLObj_W,'GLObj');
    RegisterPropertyHelper(@TSensormeasure_R,@TSensormeasure_W,'measure');
    RegisterPropertyHelper(@TSensorpos_R,@TSensorpos_W,'pos');
    RegisterPropertyHelper(@TSensorkind_R,@TSensorkind_W,'kind');
    RegisterPropertyHelper(@TSensorNoise_R,@TSensorNoise_W,'Noise');
    RegisterPropertyHelper(@TSensorhas_measure_R,@TSensorhas_measure_W,'has_measure');
    RegisterConstructor(@TSensor.Create, 'Create');
    RegisterMethod(@TSensor.SetColor, 'SetColor');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWheelList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWheelList) do
  begin
    RegisterMethod(@TWheelList.Add, 'Add');
    RegisterMethod(@TWheelList.Extract, 'Extract');
    RegisterMethod(@TWheelList.Remove, 'Remove');
    RegisterMethod(@TWheelList.IndexOf, 'IndexOf');
    RegisterMethod(@TWheelList.First, 'First');
    RegisterMethod(@TWheelList.Last, 'Last');
    RegisterMethod(@TWheelList.Insert, 'Insert');
    RegisterPropertyHelper(@TWheelListItems_R,@TWheelListItems_W,'Items');
    RegisterMethod(@TWheelList.ClearAll, 'ClearAll');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TWheel(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TWheel) do
  begin
    RegisterPropertyHelper(@TWheelPars_R,@TWheelPars_W,'Pars');
    RegisterPropertyHelper(@TWheelTyre_R,@TWheelTyre_W,'Tyre');
    RegisterPropertyHelper(@TWheelAxle_R,@TWheelAxle_W,'Axle');
    RegisterPropertyHelper(@TWheelactive_R,@TWheelactive_W,'active');
    RegisterConstructor(@TWheel.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSolidLinkList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSolidLinkList) do
  begin
    RegisterMethod(@TSolidLinkList.Add, 'Add');
    RegisterMethod(@TSolidLinkList.Extract, 'Extract');
    RegisterMethod(@TSolidLinkList.Remove, 'Remove');
    RegisterMethod(@TSolidLinkList.IndexOf, 'IndexOf');
    RegisterMethod(@TSolidLinkList.First, 'First');
    RegisterMethod(@TSolidLinkList.Last, 'Last');
    RegisterMethod(@TSolidLinkList.Insert, 'Insert');
    RegisterPropertyHelper(@TSolidLinkListItems_R,@TSolidLinkListItems_W,'Items');
    RegisterMethod(@TSolidLinkList.ClearAll, 'ClearAll');
    RegisterMethod(@TSolidLinkList.IndexOfID, 'IndexOfID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSolidLink(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSolidLink) do
  begin
    RegisterPropertyHelper(@TSolidLinkjoint_R,@TSolidLinkjoint_W,'joint');
    RegisterPropertyHelper(@TSolidLinkGLObj_R,@TSolidLinkGLObj_W,'GLObj');
    RegisterPropertyHelper(@TSolidLinkAxis_R,@TSolidLinkAxis_W,'Axis');
    RegisterPropertyHelper(@TSolidLinkID_R,@TSolidLinkID_W,'ID');
    RegisterPropertyHelper(@TSolidLinkdescription_R,@TSolidLinkdescription_W,'description');
    RegisterConstructor(@TSolidLink.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAxisList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAxisList) do
  begin
    RegisterMethod(@TAxisList.Add, 'Add');
    RegisterMethod(@TAxisList.Extract, 'Extract');
    RegisterMethod(@TAxisList.Remove, 'Remove');
    RegisterMethod(@TAxisList.IndexOf, 'IndexOf');
    RegisterMethod(@TAxisList.First, 'First');
    RegisterMethod(@TAxisList.Last, 'Last');
    RegisterMethod(@TAxisList.Insert, 'Insert');
    RegisterPropertyHelper(@TAxisListItems_R,@TAxisListItems_W,'Items');
    RegisterMethod(@TAxisList.ClearAll, 'ClearAll');
    RegisterMethod(@TAxisList.IndexFromAxisID, 'IndexFromAxisID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAxis(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAxis) do
  begin
    RegisterPropertyHelper(@TAxisParentLink_R,@TAxisParentLink_W,'ParentLink');
    RegisterPropertyHelper(@TAxisGLObj_R,@TAxisGLObj_W,'GLObj');
    RegisterPropertyHelper(@TAxisFriction_R,@TAxisFriction_W,'Friction');
    RegisterPropertyHelper(@TAxisMotor_R,@TAxisMotor_W,'Motor');
    RegisterPropertyHelper(@TAxisTrajectPoints_R,@TAxisTrajectPoints_W,'TrajectPoints');
    RegisterPropertyHelper(@TAxisWayPoints_R,@TAxisWayPoints_W,'WayPoints');
    RegisterPropertyHelper(@TAxisOdo_R,@TAxisOdo_W,'Odo');
    RegisterPropertyHelper(@TAxisref_R,@TAxisref_W,'ref');
    RegisterPropertyHelper(@TAxistorque_R,@TAxistorque_W,'torque');
    RegisterPropertyHelper(@TAxisspeed_lambda_R,@TAxisspeed_lambda_W,'speed_lambda');
    RegisterPropertyHelper(@TAxisfilt_speed_R,@TAxisfilt_speed_W,'filt_speed');
    RegisterConstructor(@TAxis.Create, 'Create');
    RegisterMethod(@TAxis.GetAnchor, 'GetAnchor');
    RegisterMethod(@TAxis.GetDir, 'GetDir');
    RegisterMethod(@TAxis.GetPos, 'GetPos');
    RegisterMethod(@TAxis.GetSpeed, 'GetSpeed');
    RegisterMethod(@TAxis.AddTorque, 'AddTorque');
    RegisterMethod(@TAxis.GLCreate, 'GLCreate');
    RegisterMethod(@TAxis.GLSetPosition, 'GLSetPosition');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAxisTrajList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAxisTrajList) do
  begin
    RegisterMethod(@TAxisTrajList.Add, 'Add');
    RegisterMethod(@TAxisTrajList.Extract, 'Extract');
    RegisterMethod(@TAxisTrajList.Remove, 'Remove');
    RegisterMethod(@TAxisTrajList.IndexOf, 'IndexOf');
    RegisterMethod(@TAxisTrajList.First, 'First');
    RegisterMethod(@TAxisTrajList.Last, 'Last');
    RegisterMethod(@TAxisTrajList.Insert, 'Insert');
    RegisterPropertyHelper(@TAxisTrajListItems_R,@TAxisTrajListItems_W,'Items');
    RegisterMethod(@TAxisTrajList.ClearAll, 'ClearAll');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TAxisTraj(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TAxisTraj) do
  begin
    RegisterPropertyHelper(@TAxisTrajpos_R,@TAxisTrajpos_W,'pos');
    RegisterPropertyHelper(@TAxisTrajspeed_R,@TAxisTrajspeed_W,'speed');
    RegisterPropertyHelper(@TAxisTrajt_R,@TAxisTrajt_W,'t');
    RegisterConstructor(@TAxisTraj.Create, 'Create');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSolidList(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSolidList) do
  begin
    RegisterMethod(@TSolidList.Add, 'Add');
    RegisterMethod(@TSolidList.Extract, 'Extract');
    RegisterMethod(@TSolidList.Remove, 'Remove');
    RegisterMethod(@TSolidList.IndexOf, 'IndexOf');
    RegisterMethod(@TSolidList.First, 'First');
    RegisterMethod(@TSolidList.Last, 'Last');
    RegisterMethod(@TSolidList.Insert, 'Insert');
    RegisterPropertyHelper(@TSolidListItems_R,@TSolidListItems_W,'Items');
    RegisterMethod(@TSolidList.ClearAll, 'ClearAll');
    RegisterMethod(@TSolidList.IndexFromID, 'IndexFromID');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TSolid(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TSolid) do
  begin
    RegisterPropertyHelper(@TSolidBody_R,@TSolidBody_W,'Body');
    RegisterPropertyHelper(@TSolidGeom_R,@TSolidGeom_W,'Geom');
    RegisterPropertyHelper(@TSolidGLObj_R,@TSolidGLObj_W,'GLObj');
    RegisterPropertyHelper(@TSolidkind_R,@TSolidkind_W,'kind');
    RegisterPropertyHelper(@TSolidParSurface_R,@TSolidParSurface_W,'ParSurface');
    RegisterPropertyHelper(@TSolidMaxParSurface_R,@TSolidMaxParSurface_W,'MaxParSurface');
    RegisterPropertyHelper(@TSolidID_R,@TSolidID_W,'ID');
    RegisterPropertyHelper(@TSoliddescription_R,@TSoliddescription_W,'description');
    RegisterPropertyHelper(@TSolidZeroPosition_R,@TSolidZeroPosition_W,'ZeroPosition');
    RegisterPropertyHelper(@TSolidZeroRotation_R,@TSolidZeroRotation_W,'ZeroRotation');
    RegisterConstructor(@TSolid.Create, 'Create');
    RegisterMethod(@TSolid.SetPosition, 'SetPosition');
    RegisterMethod(@TSolid.SetRotationA, 'SetRotationA');
    RegisterMethod(@TSolid.SetRotationR, 'SetRotationR');
    RegisterMethod(@TSolid.SetZeroState, 'SetZeroState');
    RegisterMethod(@TSolid.SetColor, 'SetColor');
    RegisterMethod(@TSolid.SetTexture, 'SetTexture');
    RegisterMethod(@TSolid.GetPosition, 'GetPosition');
    RegisterMethod(@TSolid.GetRotation, 'GetRotation');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_ODERobots(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TSolid(CL);
  RIRegister_TSolidList(CL);
  RIRegister_TAxisTraj(CL);
  RIRegister_TAxisTrajList(CL);
  with CL.Add(TSolidLink) do
  RIRegister_TAxis(CL);
  RIRegister_TAxisList(CL);
  RIRegister_TSolidLink(CL);
  RIRegister_TSolidLinkList(CL);
  RIRegister_TWheel(CL);
  RIRegister_TWheelList(CL);
  RIRegister_TSensor(CL);
  RIRegister_TSensorList(CL);
  RIRegister_TRobot(CL);
  RIRegister_TRobotList(CL);
end;

 
 
{ TPSImport_ODERobots }
(*----------------------------------------------------------------------------*)
procedure TPSImport_ODERobots.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_ODERobots(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_ODERobots.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_ODERobots(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
