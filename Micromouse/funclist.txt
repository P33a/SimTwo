 function Assigned(I: LongInt): Boolean;
 function IntToStr(I: Int64): string;
 function StrToInt(S: string): LongInt;
 function StrToIntDef(S: string; def: LongInt): LongInt;
 function Copy(S: AnyString; iFrom: LongInt; iCount: LongInt): AnyString;
 function Pos(SubStr: AnyString; S: AnyString): LongInt;
 procedure Delete(S: AnyString; iFrom: LongInt; iCount: LongInt);
 procedure Insert(S: AnyString; s2: AnyString; iPos: LongInt);
 function GetArrayLength(Arr): LongInt;
 procedure SetArrayLength(arr count: LongInt);
 function StrGet(S: string; I: LongInt): Char;
 function StrGet2(S: string; I: LongInt): Char;
 procedure StrSet(C: Char; I: LongInt; S: string);
 function WStrGet(S: AnyString; I: LongInt): WideChar;
 procedure WStrSet(C: AnyString; I: LongInt; S: AnyString);
 function VarArrayGet(S: Variant; I: LongInt): Variant;
 procedure VarArraySet(C: Variant; I: LongInt; S: Variant);
 function AnsiUpperCase(S: string): string;
 function AnsiLowerCase(S: string): string;
 function UpperCase(S: AnyString): AnyString;
 function LowerCase(S: AnyString): AnyString;
 function Trim(S: AnyString): AnyString;
 function Length(S): LongInt;
 procedure SetLength(s NewLength: LongInt);
 function Low(X): Int64;
 function High(X): Int64;
 procedure Dec(x);
 procedure Inc(x);
 procedure Include(s m);
 procedure Exclude(s m);
 function Sin(E: Extended): Extended;
 function Cos(E: Extended): Extended;
 function Sqrt(E: Extended): Extended;
 function Round(E: Extended): LongInt;
 function Trunc(E: Extended): LongInt;
 function Int(E: Extended): Extended;
 function Pi(): Extended;
 function Abs(E: Extended): Extended;
 function StrToFloat(S: string): Extended;
 function FloatToStr(E: Extended): string;
 function PadL(S: AnyString; I: LongInt): AnyString;
 function PadR(S: AnyString; I: LongInt): AnyString;
 function PadZ(S: AnyString; I: LongInt): AnyString;
 function Replicate(C: Char; I: LongInt): string;
 function StringOfChar(C: Char; I: LongInt): string;
 function Unassigned(): Variant;
 function VarIsEmpty(V: Variant): Boolean;
 function Null(): Variant;
 function VarIsNull(V: Variant): Boolean;
 function VarType(V: Variant): Word;
 procedure RaiseLastException();
 procedure RaiseException(Ex: TIFException; Param: string);
 function ExceptionType(): TIFException;
 function ExceptionParam(): string;
 function ExceptionProc(): LongWord;
 function ExceptionPos(): LongWord;
 function ExceptionToString(er: TIFException; Param: string): string;
 function StrToInt64(S: string): Int64;
 function Int64ToStr(I: Int64): string;
 function StrToInt64Def(S: string; def: Int64): Int64;
 function SizeOf(Data): LongInt;
 function IdispatchInvoke(Self: IDispatch; PropertySet: Boolean; Name: string; Par: !OPENARRAYOFVARIANT): Variant;
 function ShortCutToText(ShortCut: Word): string;
 function TextToShortCut(Text: string): Word;
 function NewMenu(Owner: TComponent; AName: string; Items: !OPENARRAYOFTOBJECT): TMainMenu;
 function NewPopupMenu(Owner: TComponent; AName: string; Alignment: TPopupAlignment; AutoPopup: Boolean; Items: !OPENARRAYOFTOBJECT): TPopupMenu;
 function NewSubMenu(ACaption: string; HCTX: Word; AName: string; Items: !OPENARRAYOFTOBJECT; AEnabled: Boolean): TMenuItem;
 function NewItem(ACaption: string; AShortCut: Word; Achecked: Boolean; AEnabled: Boolean; AOnClick: TNotifyEvent; HCTX: Word; AName: string): TMenuItem;
 function NewLine(): TMenuItem;
 procedure MInit(Mat: Matrix; newrows: LongWord; newcols: LongWord);
 procedure MTestData(Mat: Matrix; NRows: LongWord; NCols: LongWord);
 procedure MSetSize(Mat: Matrix; newrows: LongWord; newcols: LongWord);
 procedure Msetv(Mat: Matrix; r: LongWord; c: LongWord; v: Double);
 function Mgetv(Mat: Matrix; r: LongWord; c: LongWord): Double;
 procedure MUsetv(Mat: Matrix; r: LongWord; c: LongWord; v: Double);
 function MUgetv(Mat: Matrix; r: LongWord; c: LongWord): Double;
 function MIsGood(Mat: Matrix): Boolean;
 function MNumCols(Mat: Matrix): LongWord;
 function MNumRows(Mat: Matrix): LongWord;
 function Mzeros(numrows: LongWord; numcols: LongWord): Matrix;
 function Meye(n: LongWord): Matrix;
 function Mrandom(numrows: LongWord; numcols: LongWord): Matrix;
 function Minc(numrows: LongWord; numcols: LongWord): Matrix;
 procedure ArrayToMatrix(M: Matrix; D: !OPENARRAYOFDOUBLE);
 function Madd(A: Matrix; B: Matrix): Matrix;
 function MaddReal(A: Matrix; k: Double): Matrix;
 function Mneg(A: Matrix): Matrix;
 function Msub(A: Matrix; B: Matrix): Matrix;
 function MsubReal(A: Matrix; k: Double): Matrix;
 function MmultReal(A: Matrix; k: Double): Matrix;
 function Mmult(A: Matrix; B: Matrix): Matrix;
 function MPower(M: Matrix; n: LongInt): Matrix;
 function Mtran(M: Matrix): Matrix;
 function Minv(M: Matrix): Matrix;
 function Minv_fast(M: Matrix): Matrix;
 function MelementMult(A: Matrix; B: Matrix): Matrix;
 function Mmin(M: Matrix): Double;
 function Mmax(M: Matrix): Double;
 function MmaxAbs(M: Matrix): Double;
 function MallNorm(M: Matrix): Double;
 function MHflip(M: Matrix): Matrix;
 function MConv(A: Matrix; B: Matrix): Matrix;
 function MCrop(M: Matrix; uprow: LongWord; leftcol: LongWord; downrow: LongWord; rightcol: LongWord): Matrix;
 function MOneCol(M: Matrix; col: LongWord): Matrix;
 function MOneRow(M: Matrix; row: LongWord): Matrix;
 function MStamp(M: Matrix; S: Matrix; drow: LongWord; dcol: LongWord): Matrix;
 function MStampCol(M: Matrix; S: Matrix; col: LongWord): Matrix;
 function MStampRow(M: Matrix; S: Matrix; row: LongWord): Matrix;
 function MColsum(M: Matrix): Matrix;
 function MRowsum(M: Matrix): Matrix;
 function Mload(fname: string): Matrix;
 procedure Msave(M: Matrix; fname: string);
 procedure SetFireScale(x: Double; y: Double; z: Double);
 procedure SetFirePosition(x: Double; y: Double; z: Double);
 procedure StartFire();
 procedure StopFire();
 procedure StopSolidFire(R: LongInt; I: LongInt);
 procedure StartSolidFire(R: LongInt; I: LongInt);
 function GetSceneConstant(constantName: string; defaultValue: Double): Double;
 procedure SetRobotPos(R: LongInt; x: Double; y: Double; z: Double; teta: Double);
 function GetRobotIndex(ID: string): LongInt;
 function GetRobotPos2D(R: LongInt): TState2D;
 function GetRobotVel2D(R: LongInt): TState2D;
 function GetRobotCenterOfMass(R: LongInt): TPoint3D;
 function GetSolidIndex(R: LongInt; ID: string): LongInt;
 procedure SetSolidMass(R: LongInt; i: LongInt; nmass: Double);
 function GetSolidMass(R: LongInt; i: LongInt): Double;
 function GetSolidCenterOfMass(R: LongInt; i: LongInt): TPoint3D;
 procedure SetSolidPos(R: LongInt; i: LongInt; x: Double; y: Double; z: Double);
 procedure SetSolidPosMat(R: LongInt; i: LongInt; P: Matrix);
 procedure SetSolidRotationMat(R: LongInt; i: LongInt; Rot: Matrix);
 function GetSolidPos(R: LongInt; i: LongInt): TPoint3D;
 function GetSolidLinearVel(R: LongInt; i: LongInt): TPoint3D;
 function GetSolidPosMat(R: LongInt; i: LongInt): Matrix;
 function GetSolidLinearVelMat(R: LongInt; i: LongInt): Matrix;
 function GetSolidRotMat(R: LongInt; i: LongInt): Matrix;
 function GetSolidAgularVelMat(R: LongInt; i: LongInt): Matrix;
 function GetRobotX(R: LongInt): Double;
 function GetRobotY(R: LongInt): Double;
 function GetRobotTheta(R: LongInt): Double;
 function GetRobotVx(R: LongInt): Double;
 function GetRobotVy(R: LongInt): Double;
 function GetRobotW(R: LongInt): Double;
 function GetSolidX(R: LongInt; i: LongInt): Double;
 function GetSolidY(R: LongInt; i: LongInt): Double;
 function GetSolidZ(R: LongInt; i: LongInt): Double;
 function GetSolidTheta(R: LongInt; i: LongInt): Double;
 function GetSolidVx(R: LongInt; i: LongInt): Double;
 function GetSolidVy(R: LongInt; i: LongInt): Double;
 function GetSolidVz(R: LongInt; i: LongInt): Double;
 function GetSolidColor(R: LongInt; i: LongInt): TRGBAColor;
 procedure SetSolidColor(R: LongInt; I: LongInt; Red: Byte; Green: Byte; Blue: Byte);
 function GetSolidCanvas(R: LongInt; i: LongInt): TCanvas;
 procedure SolidCanvasClear(R: LongInt; i: LongInt);
 procedure SetSolidSurfaceFriction(R: LongInt; i: LongInt; mu: Double; mu2: Double);
 procedure SetSolidForce(R: LongInt; i: LongInt; Fx: Double; Fy: Double; Fz: Double);
 function GetSolidSize(R: LongInt; i: LongInt): TPoint3D;
 procedure SetSolidSize(R: LongInt; i: LongInt; x: Double; y: Double; z: Double);
 function GetGlobalSensorIndex(ID: string): LongInt;
 function GetGlobalSensorVal(i: LongInt): Double;
 function GetGlobalSensorValues(i: LongInt): Matrix;
 procedure SetGlobalSensorVin(i: LongInt; Vin: Byte);
 procedure SetSensorVin(R: LongInt; i: LongInt; Vin: Byte);
 function GetSensorIndex(R: LongInt; ID: string): LongInt;
 function GetSensorVal(R: LongInt; i: LongInt): Double;
 procedure SetSensorColor(R: LongInt; i: LongInt; Red: Byte; Green: Byte; Blue: Byte);
 function GetSensorValues(R: LongInt; i: LongInt): Matrix;
 function GetThingIndex(ID: string): LongInt;
 function GetThingsCount(): LongInt;
 function GetThingColor(T: LongInt; c: LongInt): TRGBAColor;
 procedure SetThingColor(T: LongInt; c: LongInt; Red: Byte; Green: Byte; Blue: Byte);
 function GetThingPos(T: LongInt): TPoint3D;
 procedure SetThingPos(T: LongInt; x: Double; y: Double; z: Double);
 function GetThingRotMat(T: LongInt): Matrix;
 procedure SetThingRotationMat(T: LongInt; Rot: Matrix);
 function GetThingAgularVelMat(T: LongInt): Matrix;
 function GetThingSize(T: LongInt): TPoint3D;
 procedure SetThingSize(T: LongInt; x: Double; y: Double; z: Double);
 function AddThingBox(ID: string; mass: Double; posx: Double; posY: Double; posZ: Double; sizeX: Double; sizeY: Double; sizeZ: Double; rgb24: LongInt): LongInt;
 function AddThingSphere(ID: string; mass: Double; posX: Double; posY: Double; posZ: Double; radius: Double; rgb24: LongInt): LongInt;
 function AddThingCylinder(ID: string; mass: Double; posx: Double; posY: Double; posZ: Double; radius: Double; len: Double; rgb24: LongInt): LongInt;
 function DeleteThing(ID: string): LongInt;
 procedure MeshThing(ID: string; MeshFile: string; MeshShadowFile: string; MeshScale: Double; MeshCastsShadows: Boolean);
 procedure SetThingForce(T: LongInt; Fx: Double; Fy: Double; Fz: Double);
 procedure SetThingForceAtRelPos(T: LongInt; Fx: Double; Fy: Double; Fz: Double; Px: Double; Py: Double; Pz: Double);
 procedure SetThingRelForce(T: LongInt; Fx: Double; Fy: Double; Fz: Double);
 procedure SetThingRelForceAtRelPos(T: LongInt; Fx: Double; Fy: Double; Fz: Double; Px: Double; Py: Double; Pz: Double);
 procedure SetThingSurfaceMu(T: LongInt; mu: Double; mu2: Double);
 function GetThingSpeed(T: LongInt): TPoint3D;
 procedure SetThingSpeed(T: LongInt; vx: Double; vy: Double; vz: Double);
 function GetThingAngularVel(T: LongInt): TPoint3D;
 procedure ClearThings();
 function GetShellPos(R: LongInt; i: LongInt): TPoint3D;
 procedure SetShellColor(R: LongInt; i: LongInt; Red: Byte; Green: Byte; Blue: Byte);
 function GetShellColor(R: LongInt; i: LongInt): TRGBAColor;
 function GetObstacleIndex(ID: string): LongInt;
 procedure SetObstacleColor(I: LongInt; Red: Byte; Green: Byte; Blue: Byte);
 function GetObstacleColor(I: LongInt): TRGBAColor;
 function GetObstaclePos(T: LongInt): TPoint3D;
 procedure SetObstaclePos(T: LongInt; x: Double; y: Double; z: Double);
 function GetObstacleRotMat(T: LongInt): Matrix;
 procedure SetObstacleRotationMat(T: LongInt; Rot: Matrix);
 function AddOBstacleBox(ID: string; posx: Double; posY: Double; posZ: Double; sizeX: Double; sizeY: Double; sizeZ: Double; rgb24: LongInt): LongInt;
 procedure ClearObstacles();
 function GetAxisOdo(R: LongInt; i: LongInt): LongInt;
 function GetAxisState(R: LongInt; i: LongInt): TAxisState;
 function GetAxisPos(R: LongInt; i: LongInt): Double;
 function GetAxisSpeed(R: LongInt; i: LongInt): Double;
 function GetAxisTorque(R: LongInt; i: LongInt): Double;
 function GetAxisI(R: LongInt; i: LongInt): Double;
 function GetAxisU(R: LongInt; i: LongInt): Double;
 function GetAxisUIPower(R: LongInt; i: LongInt): Double;
 function GetAxisTWPower(R: LongInt; i: LongInt): Double;
 function GetAxisStateRef(R: LongInt; i: LongInt): TAxisState;
 function GetAxisPosRef(R: LongInt; i: LongInt): Double;
 function GetAxisSpeedRef(R: LongInt; i: LongInt): Double;
 function GetAxisMotorSpeed(R: LongInt; i: LongInt): Double;
 function GetAxisMotorPos(R: LongInt; i: LongInt): Double;
 function GetAxisMotorPosDeg(R: LongInt; i: LongInt): Double;
 function GetAxisEnergy(R: LongInt; i: LongInt): Double;
 procedure ResetAxisEnergy(R: LongInt; i: LongInt);
 procedure SetMotorPars(R: LongInt; i: LongInt; aMotorPars: TMotorPars);
 function GetMotorPars(R: LongInt; i: LongInt): TMotorPars;
 procedure SetMotorControllerPars(R: LongInt; i: LongInt; nKi: Double; nKd: Double; nKp: Double; nKf: Double);
 function GetMotorControllerPars(R: LongInt; i: LongInt): TMotorControllerPars;
 procedure SetMotorControllerMode(R: LongInt; i: LongInt; newMode: string);
 function GetMotorControllerMode(R: LongInt; i: LongInt): string;
 procedure SetMotorControllerState(R: LongInt; i: LongInt; newState: Boolean);
 function GetMotorControllerState(R: LongInt; i: LongInt): Boolean;
 procedure SetMotorActive(R: LongInt; i: LongInt; nState: Boolean);
 function IsMotorActive(R: LongInt; i: LongInt): Boolean;
 procedure SetFrictionDef(R: LongInt; i: LongInt; nBv: Double; nFc: Double; nCoulombLimit: Double);
 function GetFrictionDef(R: LongInt; i: LongInt): TFrictionDef;
 procedure SetBeltSpeed(R: LongInt; i: LongInt; nSpeed: Double);
 function GetBeltSpeed(R: LongInt; i: LongInt): Double;
 procedure SetAxisSpring(R: LongInt; i: LongInt; k: Double; ZeroPos: Double);
 procedure SetAxisStateRef(R: LongInt; i: LongInt; aState: TAxisState);
 procedure SetAxisPosRef(R: LongInt; i: LongInt; aPos: Double);
 procedure SetAxisSpeedRef(R: LongInt; i: LongInt; aSpeed: Double);
 procedure SetAxisVoltageRef(R: LongInt; i: LongInt; aVoltage: Double);
 procedure SetAxisTorqueRef(R: LongInt; i: LongInt; aTorque: Double);
 function GetAxisPosDeg(R: LongInt; i: LongInt): Double;
 function GetAxisSpeedDeg(R: LongInt; i: LongInt): Double;
 function GetAxisPosRefDeg(R: LongInt; i: LongInt): Double;
 function GetAxisSpeedRefDeg(R: LongInt; i: LongInt): Double;
 function Deg(angle: Double): Double;
 function Rad(angle: Double): Double;
 function GetAxisIndex(R: LongInt; ID: string; i: LongInt): LongInt;
 procedure LoadJointWayPoints(r: LongInt; JointPointsFileName: string);
 procedure SaveJointWayPoints(r: LongInt; JointPointsFileName: string);
 function CountJointWayPoints(R: LongInt; i: LongInt): LongInt;
 function GetJointWayPoint(R: LongInt; i: LongInt; idx: LongInt): TAxisPoint;
 procedure SetJointWayPoint(R: LongInt; i: LongInt; idx: LongInt; apos: Double; aspeed: Double; atime: Double);
 function GetAxisTrajPoint(R: LongInt; i: LongInt; idx: LongInt): TAxisPoint;
 procedure SetAxisTrajPoint(R: LongInt; i: LongInt; idx: LongInt; LP: TAxisPoint);
 procedure AddAxisTrajPoint(R: LongInt; i: LongInt; LP: TAxisPoint);
 procedure DelAxisTrajPoint(R: LongInt; i: LongInt; idx: LongInt);
 function CountAxisTrajPoints(R: LongInt; i: LongInt): LongInt;
 procedure ClearAxisTrajPoints(R: LongInt; i: LongInt);
 procedure SetTrailColor(T: LongInt; Red: Byte; Green: Byte; Blue: Byte);
 procedure AddTrailNode(T: LongInt; x: Double; y: Double; z: Double);
 procedure DelTrailNode(T: LongInt);
 procedure ClearTrail(T: LongInt);
 function KeyPressed(k: LongInt): Boolean;
 procedure ClearAStarMap();
 procedure SetupAStarMap(xi: LongInt; yi: LongInt; xt: LongInt; yt: LongInt; nEucliDistK: Double);
 procedure AddAStarObstacleCircle(xc: Double; yc: Double; r: Double);
 procedure AddAStarObstacleRect(xi: Double; yi: Double; xf: Double; yf: Double);
 procedure CalcAStarPath();
 function GetAStarPathPoint(i: LongInt): TPoint;
 function GetAStarPathCount(): LongInt;
 procedure ChartSeriesAddXY(ChartIndex: LongInt; SeriesIndex: LongInt; X: Double; Y: Double);
 procedure ChartSeriesClear(ChartIndex: LongInt; SeriesIndex: LongInt);
 procedure ChartSetAxisMinMax(ChartIndex: LongInt; Xmin: Double; Xmax: Double; Ymin: Double; Ymax: Double);
 procedure ChartSeriesSetColor(ChartIndex: LongInt; SeriesIndex: LongInt; newColor: LongInt);
 function ChartSeriesGetCount(ChartIndex: LongInt): LongInt;
 procedure ChartSeriesSetCount(ChartIndex: LongInt; SeriesCount: LongInt);
 function ChartSeriesCreate(ChartIndex: LongInt): LongInt;
 procedure ChartSeriesDeleteAll(ChartIndex: LongInt);
 function arcsin(x: Extended): Extended;
 function arccos(x: Extended): Extended;
 function tan(x: Extended): Extended;
 function ATan2(y: Double; x: Double): Double;
 function ACos2(y: Double; x: Double): Double;
 function ASin2(y: Double; x: Double): Double;
 function Power(Base: Extended; Exponent: Extended): Extended;
 function Log10(X: Extended): Extended;
 function LogN(Base: Extended; X: Extended): Extended;
 function Sqr(X: Double): Double;
 function Exp(X: Double): Double;
 function Ln(X: Double): Double;
 function DiffAngle(a1: Double; a2: Double): Double;
 function Dist(x: Double; y: Double): Double;
 function Sign(a: Double): Double;
 function Sat(a: Double; limit: Double): Double;
 function NormalizeAngle(ang: Double): Double;
 function TranslateAndRotate(rx: Double; ry: Double; px: Double; py: Double; tx: Double; ty: Double; teta: Double): Double;
 function RotateAndTranslate(rx: Double; ry: Double; px: Double; py: Double; tx: Double; ty: Double; teta: Double): Double;
 function RotateAroundPoint(rx: Double; ry: Double; px: Double; py: Double; cx: Double; cy: Double; teta: Double): Double;
 function RandG(Mean: Extended; StdDev: Extended): Extended;
 function random01(): Double;
 procedure Randomize();
 function BiLinInterp(Surf: Matrix; xmin: Double; xmax: Double; ymin: Double; ymax: Double; x: Double; y: Double): Double;
 function IntToHex(Value: LongInt; Digits: LongInt): string;
 procedure WriteLn(S: string);
 function Format(sFormat: string; Args: !OPENARRAYOFCONST): string;
 function ReadComPort(): string;
 procedure WriteComPort(s: string);
 function ReadUDPData(): string;
 procedure WriteUDPData(ToIP: string; ToPort: LongInt; s: string);
 function ReadUDPPacket(): string;
 function GetUDPPacketCount(): LongInt;
 procedure SetRCValue(r: LongInt; c: LongInt; s: string);
 function GetRCValue(r: LongInt; c: LongInt): Double;
 function GetRCText(r: LongInt; c: LongInt): string;
 function RCButtonPressed(r: LongInt; c: LongInt): Boolean;
 function RangeToMatrix(r: LongInt; c: LongInt; rows: LongInt; cols: LongInt): Matrix;
 procedure MatrixToRange(r: LongInt; c: LongInt; M: Matrix);
 procedure MatrixToRangeF(r: LongInt; c: LongInt; M: Matrix; FormatString: string);
 procedure ClearButtons();
 procedure RefreshSheets();
 procedure CloseSimTwo();
 function ScriptPeriod(): Double;
 function Now(): Double;
 function GetTickCount(): LongWord;
 procedure SetRCBackColor(r: LongInt; c: LongInt; newColor: LongInt);
 function RGBToColor(R: Byte; G: Byte; B: Byte): LongInt;
 procedure Test(B: Double);
 procedure ClearUDPBuffer(Buf: TUDPBuffer);
 procedure NetBufferSeek(Buf: TUDPBuffer; disp: LongInt);
 function NetStringBuffer(Buf: TUDPBuffer): string;
 procedure NetPutByte(Buf: TUDPBuffer; value: Byte);
 procedure NetPutWord(Buf: TUDPBuffer; value: Word);
 procedure NetPutShort(Buf: TUDPBuffer; value: SmallInt);
 procedure NetPutInt(Buf: TUDPBuffer; value: LongInt);
 procedure NetPutFloat(Buf: TUDPBuffer; value: Single);
 procedure NetPutString(Buf: TUDPBuffer; str: string);
 procedure NetPutAngle(Buf: TUDPBuffer; value: Double);
 function NetPeekByte(Buf: TUDPBuffer): Byte;
 function NetGetByte(Buf: TUDPBuffer): Byte;
 function NetGetWord(Buf: TUDPBuffer): Word;
 function NetGetShort(Buf: TUDPBuffer): SmallInt;
 function NetGetInt(Buf: TUDPBuffer): LongInt;
 function NetGetFloat(Buf: TUDPBuffer): Single;
 function NetGetString(Buf: TUDPBuffer): string;
 function NetGetAngle(Buf: TUDPBuffer): Double;
 function getModbusCoil(bit_addr: LongInt): Boolean;
 function getModbusInput(bit_addr: LongInt): Boolean;
 procedure setModbusCoil(bit_addr: LongInt; new_state: Boolean);
 procedure setModbusInput(bit_addr: LongInt; new_state: Boolean);
